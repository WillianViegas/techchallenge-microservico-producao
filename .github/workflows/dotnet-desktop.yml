# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.200

    - name: Restore dependencies
      run: dotnet restore ./src/techchallenge-microservico-producao/techchallenge-microservico-producao.sln

    - name: Build
      run: dotnet build  ./src/techchallenge-microservico-producao/techchallenge-microservico-producao.sln --no-restore

    - name: Tests
      run: dotnet test  ./src/techchallenge-microservico-producao/techchallenge-microservico-producao.sln
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Docker Login
      run: aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}

    - name: Build and Push Docker images
      run: |
          cd src
          cd techchallenge-microservico-producao
          docker build -t ms-producao-img:latest -f  techchallenge-microservico-producao/Dockerfile .
          docker tag ms-producao-img:latest ${{ secrets.AWS_REGISTRY_URL }}:ms-producao-img
          docker push ${{ secrets.AWS_REGISTRY_URL }}:ms-producao-img
    
      #  docker tag ms-producao-img:latest ${{ secrets.DOCKER_HUB_URL }}:ms-producao-img
      #  docker push ${{ secrets.DOCKER_HUB_URL }}:ms-producao-img

    - name: Build and Push Docker Ecr images
      id: build-and-push-ecr
      run: |
        cd src/techchallenge-microservico-producao
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
        docker build -t ms-producao-img:${TIMESTAMP} -f techchallenge-microservico-producao/Dockerfile .
        docker tag ms-producao-img:${TIMESTAMP} ${{ secrets.AWS_REGISTRY_URL }}:ms-producao-img-${TIMESTAMP}
        docker push ${{ secrets.AWS_REGISTRY_URL }}:ms-producao-img-${TIMESTAMP}
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Hub images
      run: |
        docker tag ms-producao-img:${{ env.TIMESTAMP }} ${{ secrets.DOCKER_HUB_URL }}:ms-producao-img-${{ env.TIMESTAMP }}
        docker push ${{ secrets.DOCKER_HUB_URL }}:ms-producao-img-${{ env.TIMESTAMP }}

    #- name: Set AWS ConfigMap Variables
     # id: set-configmap-variables
     # run: |
    #    echo "::set-output name=aws_access_key_id::${{ secrets.AWS_ACCESS_KEY_ID }}"
      #  echo "::set-output name=aws_secret_access_key::${{ secrets.AWS_SECRET_ACCESS_KEY }}"
     #   echo "::set-output name=aws_region::${{ secrets.AWS_REGION }}"
      #  echo "::set-output name=db_connection_string::${{ secrets.DB_CONNECTION_STRING }}"
      #  echo "::set-output name=db_database_name::${{ secrets.DB_DATABASE_NAME }}"
      #  echo "::set-output name=db_user::${{ secrets.DB_USER }}"
      #  echo "::set-output name=db_password::${{ secrets.DB_PASSWORD }}"
      #  echo "::set-output name=mongo_initdb_database::${{ secrets.MONGO_INITDB_DATABASE }}"
       # echo "::set-output name=mongo_initdb_root_username::${{ secrets.MONGO_INITDB_ROOT_USERNAME }}"
      #  echo "::set-output name=mongo_initdb_root_password::${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}"

   # - name: Setup kubectl
    #  uses: azure/setup-kubectl@v3
    #  with:
    #   version: 'v1.18.0'

    #- name: Update kubeconfig
    #  run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

    #- name: Delete from EKS
    #  run:  |
   #      cd src
    #     cd techchallenge-microservico-producao
    #     kubectl delete -f ./k8s/ || true

   # - name: Update Kubernetes ConfigMap
   #   run: |
    #     kubectl create configmap my-config-cancelamento \
    #      --from-literal=AWS_ACCESS_KEY_ID=${{ steps.set-configmap-variables.outputs.aws_access_key_id }} \
     #     --from-literal=AWS_SECRET_ACCESS_KEY=${{ steps.set-configmap-variables.outputs.aws_secret_access_key }} \
      #    --from-literal=AWS_REGION=${{ steps.set-configmap-variables.outputs.aws_region }} \
      #    --from-literal=AWS_DEFAULT_REGION=${{ steps.set-configmap-variables.outputs.aws_region }} \
       #   --from-literal=DatabaseConfig__ConnectionString=${{ steps.set-configmap-variables.outputs.db_connection_string }} \
       #   --from-literal=DatabaseConfig__DatabaseName=${{ steps.set-configmap-variables.outputs.db_database_name }} \
       #   --from-literal=DatabaseConfig__User=${{ steps.set-configmap-variables.outputs.db_user }} \
        #  --from-literal=DatabaseConfig__Password=${{ steps.set-configmap-variables.outputs.db_password }} \
        #  --from-literal=MONGO_INITDB_DATABASE=${{ steps.set-configmap-variables.outputs.mongo_initdb_database }} \
       #   --from-literal=MONGO_INITDB_ROOT_USERNAME=${{ steps.set-configmap-variables.outputs.mongo_initdb_root_username }} \
        #  --from-literal=MONGO_INITDB_ROOT_PASSWORD=${{ steps.set-configmap-variables.outputs.mongo_initdb_root_password }} \
       #   --dry-run=client -o yaml | kubectl apply -f -

   # - name: Deploy to EKS
   #   run:  |
    #     cd src
    #     cd techchallenge-microservico-producao
    #     kubectl apply -f ./k8s/application-services.yml
    #     kubectl apply -f ./k8s/application-config.yml
    #     kubectl apply -f ./k8s/mongodb-config.yml
     #    kubectl apply -f ./k8s/private-lb.yml
      #   kubectl apply -f ./k8s/public-lb.yml

   # - name: Update Kubernetes Deployment
  #    run: |
   #     kubectl set image deployment/techchallenge-microservico-producao techchallenge-microservico-producao=${{ secrets.AWS_REGISTRY_URL }}:ms-producao-img-${{ env.TIMESTAMP }}

   # - name: Rollout Restart
   #   run: |
    #    kubectl rollout restart deployment techchallenge-microservico-producao
